unit Uscanner;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, IdBaseComponent, IdComponent,
  IdTCPConnection, IdTCPClient, Vcl.WinXCtrls, Vcl.StdCtrls, Vcl.ExtCtrls,
  Vcl.Samples.Spin, IdAntiFreezeBase, IdAntiFreeze,Winsock;

type
  TfrmScanner = class(TForm)
    edtIp: TEdit;
    seInicio: TSpinEdit;
    seFim: TSpinEdit;
    lblIp: TLabel;
    mmoResultado: TMemo;
    shp1: TShape;
    lbl1: TLabel;
    lbl2: TLabel;
    btnIniciar: TButton;
    lblResultado: TLabel;
    actvtyndctr1: TActivityIndicator;
    lbl3: TLabel;
    idntfrz1: TIdAntiFreeze;
    btnParar: TButton;
    procedure btnIniciarClick(Sender: TObject);
    procedure btnPararClick(Sender: TObject);
  private
    { Private declarations }
    procedure IniciarVarredura(const fPortInicio, fPortFim : Integer);
    function PortTCP_IsOpen(dwPort : Word; ipAddressStr: AnsiString) : boolean;
  public
    { Public declarations }

  end;

var
  frmScanner: TfrmScanner;
  Stop: integer;

implementation

{$R *.dfm}

procedure TfrmScanner.btnPararClick(Sender: TObject);
begin
  Stop := 1;
  btnParar.Enabled := False;
end;

procedure TfrmScanner.btnIniciarClick(Sender: TObject);
begin
  try
    btnParar.Enabled := True;
    actvtyndctr1.Animate := True;
    IniciarVarredura(seInicio.Value, seFim.value);
  finally
    actvtyndctr1.Animate := False;
  end;
end;

procedure TfrmScanner.IniciarVarredura(const fPortInicio, fPortFim: Integer);
var
  iport : Integer;
   ip :  ShortString;
begin
  Stop:= 0 ;
  iport:= fPortInicio;
  ip := edtIp.ToString+'';

  mmoResultado.lines.Clear;
  mmoResultado.lines.Add('Iniciando Varredura de portas, '+
                         'disparada para o host: ' + edtIp.text);
  mmoResultado.lines.add(#13);

  while iport <= fPortFim do
  Begin
    Application.ProcessMessages;

    if Stop = 1 then
    begin
      mmoResultado.lines.Add('Verificação cancelada pelo usuário!');
      break;
    end;

    mmoResultado.lines.Add('Verificando status da porta: [ '+ IntToStr(iport)+' ] '+
                           'para o host: ' + edtIp.text);

    Application.ProcessMessages;

    Try
      if PortTCP_IsOpen(iport, PAnsiChar(ip)) then
        mmoResultado.lines.add('* OPEN * Porta [ '+ inttostr(iport)+ ' ] está Aberta.')
      else
        mmoResultado.lines.add('A Porta [ '+ inttostr(iport)+ ' ] está Fechada.');
      mmoResultado.lines.add(#13);
    Finally
      Inc(iport);
      seInicio.Value := iport;
      Application.ProcessMessages;
    end;
  end;

  mmoResultado.lines.add(#13);
  seInicio.Value := 1;
  mmoResultado.lines.add('Verificação Terminada.');
end;

function TfrmScanner.PortTCP_IsOpen(dwPort: Word;
  ipAddressStr: AnsiString): boolean;
var
  client : sockaddr_in;
  sock   : Integer;

  ret    : Integer;
  wsdata : WSAData;
begin
 Result:=False;
 ret := WSAStartup($0002, wsdata); //initiates use of the Winsock DLL
  if ret<>0 then exit;
  try
    client.sin_family      := AF_INET;  //Set the protocol to use , in this case (IPv4)
    client.sin_port        := htons(dwPort); //convert to TCP/IP network byte order (big-endian)
    client.sin_addr.s_addr := inet_addr(PAnsiChar(ipAddressStr));  //convert to IN_ADDR  structure
    sock  :=socket(AF_INET, SOCK_STREAM, 0);    //creates a socket
    Result:=connect(sock,client,SizeOf(client))=0;  //establishes a connection to a specified socket
  finally
  WSACleanup;
  end;

end;

end.
